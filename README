-----------------------------------------------------------
GROUP PROJECT

Don't leaf me nameless!
ADD TO THE LIST OF POTENTIAL PROJECT/APP NAMES HERE:
iLeaf
beLeaf (sounds like belief)


==========================================================

-----------------------------------------------------------
Mandate
-----------------------------------------------------------
Some questions to be answered...
Which are minimum we agree to include in initial project?
What time scale/margin of error do their implementation entail?
What is the wow feature, we aim to show off with, which isnt a minimum?

1. Create a UI for a plant recogniser (iOS... Android? is it too difficult?)
   1.1 Which can take photographs of plants
       1.1.1 Which has all of the functionality inbuilt, i.e. Zoom, flash etc
   1.2 Which can prompt the user for a flower/fruit/trunk/bark photo, or to enable GPS, if our ML needs it
   1.3 Which can store the photograph along with time, location, orientation? focal length?
       1.3.1 Which can delete stored photos 
       1.3.2 Which can browse photos by date, tree, location (map view possible?)
   1.4 Which can send photos to the server and receive leaf type?
   1.5 Which stores the returned leaf type linked to the photo for future ref
AD:1.6 Which loads a little description page for the plant (link to Wikipedia?)
AD:1.7 Which allows users to label their photos and upload them to feed our training set
    AD:1.7.1 Involves allowing users to correct a mislabelling?

2. Create a server 
   2.1 Which can accept and queue requests to analyse photos
   2.2 Which can host our machine learning program
   2.3 Which can interact with the UI, sending the most likely match
       2.3.1 Also send back the next most likely match? error? certainty?
   2.4 Which can aggregate information of photos?  Too big brothery?
   2.5 Which has a website which advertises the app and explains our methodology?
       2.5.1 Which contains the wiki we created during the project
       2.5.2 Which allows anyone to (batch) submit labelled data
       2.5.3 Which allows experts to verify whether a leaf is what we label it as?
       2.5.4 How do we check if they're experts?  Or just let anyone do it?

AD:3. Find labelled leaf/flower/fruit/bark data (world-class classifier performance requires very large amounts)
AD:3.1. Sourcce datasets
    AD:3.1.1 ImageCLEF
    AD:3.1.2 Natural History Museum urban tree survey
    AD:3.1.3 LeafSnap - may go open source, otherwise reach out to founder Prof Belhumeur
    AD:3.1.4 Crowdsource via website/app?
    AD:3.1.5 Scrape Google image search?
    AD:3.1.6 Scrape blogs?
    ADL3.1.7 Need more!
AD:3.2. Integrate datasets so that they can all be fed into the ML program

4. Create a machine learning based plant identifier
   4.1 Which can run relatively efficiently for (multiple?) requests and can be hosted on the server
AD:4.2 Which can accept information about characteristics included in our training data 
AD:4.3 Adopt a suitable ML architecture
    AD:4.3.1 Deep Learning
    AD:4.3.2 Hand-coded feature recognition? (used by LeafSnap)
AD:4.4 Batch-train the classifier
    AD:4.4.1 If DL, fork Daniel Nouri's fork of cuda-convnet to optimise it for our data (using PyLearn2)
    AD:4.4.2 GPU Implementation (if DL, using deepnet wrapper)
AD:4.5 Test the classifier
AD:4.6 Online-train the classifier?
    AD:4.6.1 If our project succeeds in creating an ecosystem of (expert) contributors, would be great to indefinitely 
             process future contributions
    AD:4.6.2 Which hardware implementation?

-----------------------------------------------------------
Software structure
-----------------------------------------------------------

1. Create quick stub programs for each and setup standard interfaces to conform to
2. Agreement on standard programming languages in use (C++ for one...)
3. Development strategy? Agile, Scrum, XP Programming? Does it matter?
4. Version control system will be git
5. Heavy use of automated shell scripts for installs/testing/common tasks
6. Separate git repos for the three mandates, linked into a master?
7. Stable git repos to be linked, vs development repos for advancing progress individually
8. Standard automated unit testing on every key module, with aim for complete coverage

-----------------------------------------------------------
Resource requirements
-----------------------------------------------------------

1. GPU for machine learning
2. A server machine to host on
3. iPhones/(Android?) devices for testing
4. Lots of pictures of leaves...

-----------------------------------------------------------
Team Members and Roles
-----------------------------------------------------------

                Need!
        Leader  Doc-Editor  Server  UI  ML Data
Gerard  Y                   ?       ?   Y  ?
Alex                        ?       ?   Y  Y
Ashley                      ?       Y   ?  ?
John                        ?       ?   Y  ?
Simon                       Y       ?   ?  ?
Stewart                     ?       ?   ?  ?

If multiple people work on machine learning, should we:
 1. split up and try different approaches
 2. focus efforts on one methodology e.g. deep neural networks
Option 1 is safer, especially if we set hard deadline on when basic prototyping ends and
work on final system begins. This means we have less likelihood of investing in a system
which we can't make work to an acceptable standard in the allotted time.
AD: explore different approaches, settle on one before the initial report is due?

-----------------------------------------------------------
To Do List (Append as tasks arise)
-----------------------------------------------------------
=> Discuss project mandate, and remainder of this document, assign jobs
=> Turn this into a wiki page on gitlab?

-----------------------------------------------------------
Deadlines, and those responsible for their achievement
-----------------------------------------------------------

Add other team decided deadlines here

AD: 24.01.2014 FIX ML STRATEGY
31.01.2014 INITIAL REPORT DUE 
14.03.2014 INTERMEDIATE REPORT DUE
16.05.2014 FINAL REPORT DUE
19.05.2014 PRESENTATION DUE
