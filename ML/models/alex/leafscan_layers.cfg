[data]
type=data
dataIdx=0

[labels]
type=data
dataIdx=1

[conv1]
type=conv
inputs=data
channels=3
filters=16     # previously 32, but this is leafscan, probs don't need that many
padding=2
stride=1       # previously 6, but corners must be picked up, some are v small, need precision 
filterSize=9   # prev 18, need more precision
initW=0.0001, 
partialSum=1
sharedBiases=1



# pools what it finds in local regions, channel per channel.
# this totally makes sense for plants. one neuron of a pooling layer could learn to summarise the number of filter-sized  edges in certain orientations which are present in a given region, in order to decide whether or not a corner is in this region.
[pool1]
type=pool
pool=max
inputs=conv1
start=0
sizeX=8         # size of the pooling region in the x (equivalently, y) dimension
# but I'm confused: how can sizeX(pool1) < filterSize(conv1) ? learn with trial/error
# would be good to manually inspect size in pixels of a leaf corner
stride=1        # prev 3, but need precision here too
outputsX=0
channels=16     # prev 32, but changed filters above to 16, so need to change here too?
neuron=relu

[conv2]
type=conv
inputs=pool1
filters=32
padding=2
stride=2
filterSize=9
channels=32
neuron=relu
initW=0.01
partialSum=1
sharedBiases=1

[pool2]
type=pool
pool=avg
inputs=conv2
start=0
sizeX=3
stride=2
outputsX=0
channels=32

[conv3]
type=conv
inputs=pool2
filters=64
padding=2
stride=1
filterSize=5
channels=32
neuron=relu
initW=0.01
partialSum=1
sharedBiases=1

[pool3]
type=pool
pool=avg
inputs=conv3
start=0
sizeX=3
stride=2
outputsX=0
channels=64

[fc10]
type=fc
outputs=212
inputs=pool3
initW=0.01

[probs]
type=softmax
inputs=fc10

[logprob]
type=cost.logreg
inputs=labels,probs
